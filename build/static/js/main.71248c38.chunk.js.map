{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNote","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteServices","initialNotes","notesToShow","filter","map","find","n","changeNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"wLAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCOjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCQEC,EAfA,WAOX,OACI,sBAAKL,UAPW,CAChBM,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,4G,gBCXNC,EAAU,aAuBD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJb,QAAS,mCACTc,KAAM,eACNhB,WAAW,GAEf,OAAOW,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALC,SAACJ,EAAIM,GAEjB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCkE9BK,EAjFH,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAENG,EAFM,KAEGC,EAFH,OAGkBJ,oBAAS,GAH3B,mBAGNK,EAHM,KAGGC,EAHH,OAI4BN,mBAAS,0BAJrC,mBAINO,EAJM,KAIQC,EAJR,KA0BdC,qBAAU,WACNC,IAEKlB,MAAK,SAAAmB,GACFT,EAAQS,QAEjB,IAEH,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAuBhE,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAAS2B,IACvB,yBAAQ7B,QAAS,kBAAM4B,GAAYD,IAAnC,kBACUA,EAAU,YAAc,SAElC,6BACKO,EAAYE,KAAI,SAAC1C,GAAD,OACb,cAAC,EAAD,CAAoBA,KAAMA,EAC1BC,iBAAkB,kBA7DP,SAAAiB,GACvB,IAAMlB,EAAO6B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAU,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAE/CmC,EACQpB,EAAI2B,GACXzB,MAAK,SAAA0B,GACFhB,EAAQD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKkB,KAAOA,EAAKlB,EAAO8C,SAErDC,OAAM,SAAAC,GACHZ,EAAgB,QAAD,OACHpC,EAAKK,QADF,qCAGf4C,YAAW,WACPb,EAAgB,QACjB,KACHN,EAAQD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SA6CHgC,CAAmBlD,EAAKkB,MADrClB,EAAKkB,SAKxB,uBAAMiC,SAnCE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfjD,QAAS0B,EACTZ,MAAM,IAAIoC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,GAC3BxC,GAAIW,EAAM8B,OAAS,GAGvBrB,EACYgB,GACPlC,MAAK,SAAA0B,GACFhB,EAAQD,EAAMN,OAAOuB,IACrBd,EAAW,QAsBf,UACI,uBAAO4B,MAAO7B,EAAS8B,SAnBX,SAACT,GACrBpB,EAAWoB,EAAMU,OAAOF,UAmBhB,wBAAQG,KAAK,SAAb,qBAGJ,cAAC,EAAD,Q,MC7EZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.71248c38.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const FooterStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div className={FooterStyle}>\r\n            <br />\r\n            <em>Note app, Department of computer science, university of Hyelsinki 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios';\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 100,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T1',\r\n        important: true\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst  update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification';\r\nimport Footer from './components/Footer';\r\nimport noteServices from './services/notes';\r\n\r\nconst App = () => {\r\n    const [ notes, setNote ] = useState([])\r\n    const [ newNote, setNewNote ] = useState('')\r\n    const [ showAll, setShowAll ] = useState(true)\r\n    const [ errorMessage, setErrorMessage ] = useState('some error happened...')\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changeNote = { ...note, important: !note.important }\r\n\r\n        noteServices\r\n        .update(id, changeNote)\r\n        .then(returnedNote => {\r\n            setNote(notes.map(note => note.id !== id ? note : returnedNote))\r\n        })\r\n        .catch(error => {\r\n            setErrorMessage(\r\n                `Note ${note.content} was already removed from server`\r\n            )\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n            setNote(notes.filter(n => n.id !== id))\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        noteServices\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNote(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            id: notes.length + 1,\r\n        }\r\n\r\n        noteServices\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNote(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleNewChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n                show {showAll ? 'important' : 'all'}\r\n            </button>\r\n            <ul>\r\n                {notesToShow.map((note) => \r\n                    <Note key={note.id} note={note}\r\n                    toggleImportance={() => toggleImportanceOf(note.id)}\r\n                />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNewChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n"],"sourceRoot":""}